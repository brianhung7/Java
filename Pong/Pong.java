
package hw9;

import java.awt.*;
import javax.swing.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *Brian Pham Pic 20A. Homework 9. Pong assignment.
 */
public class Pong extends javax.swing.JFrame{
               // Ball b = new Ball();
    /**
     * Creates new form Pong
     */
    public Pong() {
        setTitle("Maplestory 2");
        initComponents();
        jPanel1.requestFocus();
        new Thread((Canvas)jPanel1).start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new Canvas();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        jLabel1.setText("Player 1 Score: " + leftScore);
        jLabel1.setToolTipText("");
        jLabel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jLabel1PropertyChange(evt);
            }
        });

        jLabel2.setText("rightScore");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(162, 162, 162))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        
    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        System.out.println(evt.getKeyCode());
        System.out.println("Check");
        Canvas myCanvas = (Canvas) jPanel1;
        if(evt.getKeyCode()==87)
            myCanvas.setVy(-1);
        
        if(evt.getKeyCode()==83)
            myCanvas.setVy(1);
        
        if(evt.getKeyCode()==38)
            myCanvas.setVy2(-1);
        
        if(evt.getKeyCode()==40)
            myCanvas.setVy2(1);
    }//GEN-LAST:event_jPanel1KeyPressed

    private void jLabel1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jLabel1PropertyChange
       leftScore = getLeftScore();
        jLabel1.setText("Left score is: " + leftScore);
    }//GEN-LAST:event_jLabel1PropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
          //Ball bc = new Ball();
        /* Create and display the form */
        
              System.out.println(leftScore);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pong().setVisible(true);
            }
           
             
            
        });
    }

    private int getLeftScore() {
        Canvas myCanvas = (Canvas) jPanel1;
        leftScore = myCanvas.getLeftScore();
        return leftScore;
    }


    class Canvas extends JPanel implements Runnable{
    int playSpaceHeight = 500;
    int playSpaceWidth = 800;
    int paddleY = 20;//paddle 1 location
    int paddleY2 = 20;//paddle 2 location
    int ballDia = 20;//ball diameter
    int ballLocationX = playSpaceWidth/2 - ballDia/2;//ball x coord
    int ballLocationY = playSpaceHeight/2 - ballDia/2;//ball y coord
    int vy2;//paddle up/down movement
    int vy;//paddle up/down movement
    boolean ballDown = true;
    boolean ballRight = true;
    public int leftScore = 0;
    public int rightScore = 0;
    boolean scoreChanged = false;
    int paddleSpeed = 1; //Increase if you want faster paddle
    
    public void paintComponent(Graphics g){
        g.setColor(Color.black);
        g.fillRect(0, 0, playSpaceWidth, playSpaceHeight);
        g.setColor(Color.white);
        g.drawLine(playSpaceWidth/2, 0, playSpaceWidth/2, playSpaceHeight);
        drawPaddle1(g);
        drawPaddle2(g);
        drawBall(g);
        g.setFont(new Font("Calibri", Font.BOLD, 100));
        g.drawString(Integer.toString(leftScore),playSpaceWidth/2-140,100);
        g.drawString(Integer.toString(rightScore),playSpaceWidth/2+100,100);
    }
    
    public int getLeftScore(){
        return leftScore;
    }
    
    public void drawPaddle1(Graphics g){
        g.setColor(Color.white);
        g.fillRect(10,paddleY,20,60);
    }
    
    public void drawPaddle2(Graphics g){
        g.setColor(Color.white);
        g.fillRect(750,paddleY2,20,60);
    }
    
    //Moves left paddle, remove vy comment for manual paddle movement
    public void movePaddle(){
        if (vy == 1 && paddleY < playSpaceHeight-60){ //moving down
            paddleY+=paddleSpeed;
        }
        else if (vy == -1 && paddleY > 0) //moving up
            paddleY-=paddleSpeed;
        //vy=0;
    }   
    
    //moves right paddle, remove vy2 comment for manual paddle movement
    public void movePaddle2(){
        if (vy2 == 1 && paddleY2 < playSpaceHeight-60){ //moving down
            paddleY2+=paddleSpeed;
        }
        else if (vy2== -1 && paddleY2 > 0) //moving up
            paddleY2-=paddleSpeed;
        //vy2=0;
    }
    
    public void drawBall(Graphics g){
        g.setColor(Color.blue);
        if(scoreChanged){
            ballLocationX = playSpaceWidth/2 - ballDia/2;
            ballLocationY = playSpaceHeight/2 - ballDia/2;
            ballDown = true; //Ball will be served to the winner of each point
        }
        g.fillOval(ballLocationX, ballLocationY, 20, 20);
        scoreChanged = false;
        
    }
    
    
    public void moveBall(){
        if(ballDown==true)
            ballLocationY++;
        else 
            ballLocationY--;
        
        
        if(ballRight==true)
            ballLocationX++;
        else
            ballLocationX--;
        
        
        if(ballLocationY == playSpaceHeight - ballDia)
            ballDown=false;
        
        if(ballLocationY==0)
            ballDown=true;
        
        
        if(ballLocationX==playSpaceWidth-ballDia-10)
            ballRight=false;
        
        if(ballLocationX==0)
            ballRight=true;
        
        repaint();    
    }

     //Set paddle up/down movement
   public void setVy(int vy){
            this.vy = vy;
        }
   
        //checking if ball hits paddle
   public void paddleCollisionCheck(){
       if(ballLocationX==25 && ballLocationY>paddleY-50 && ballLocationY<paddleY+50)
           ballRight=true;
       
       if(ballLocationX==730&& ballLocationY>paddleY2-50 && ballLocationY<paddleY2+50)
           ballRight=false;
       
       if(ballLocationX == 770){ //Keep left score
           leftScore++;
           scoreChanged = true;
       }
       
       if(ballLocationX == 0){ //Keep right score
           rightScore++;
           scoreChanged = true;
       }
   }
        public void setVy2(int vy2){
            this.vy2 = vy2;
        }
        
        public void run(){
            while(true){
                //changeX();
                //changeY();
                moveBall();
                movePaddle();
                movePaddle2();
                paddleCollisionCheck();
                
                //drawPaddle();
                this.repaint();
                try{Thread.sleep(10);}catch(Exception e){}
            }
        }
        
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    private static int leftScore;
}
